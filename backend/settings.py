"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from config import (
    DEBUG, SECRET_KEY, ALLOWED_HOSTS,
    DATABASE, CACHES_CONFIG, REDIS_CONFIG,
    RABBITMQ_CONFIG, CELERY_CONFIG, ALIYUN_CONFIG,
    JWT_CONFIG
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEBUG

ALLOWED_HOSTS = ALLOWED_HOSTS

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'channels',  # 使Django识别WebSocket功能
    'dream',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 只允许特定域名访问(生产环境)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
]

# 允许携带认证信息（cookies等）
CORS_ALLOW_CREDENTIALS = True

# 允许的请求方法
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# 允许的请求头
CORS_ALLOW_HEADERS = [
    # accept 和 accept-encoding 是不必要的，因为这些是浏览器默认会发送的标准请求头，不需要特别声明允许。
    'authorization',  # 用于JWT认证
    'content-type',  # 用于指定请求体的格式
]

# 允许暴露的响应头
CORS_EXPOSE_HEADERS = [
    # Content-Length 是不必要的，因为这是标准响应头，浏览器默认就可以访问
    'Content-Type',  # 用于指定响应内容的类型
    'Authorization',  # 用于JWT token的传递
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = DATABASE

# Cache
CACHES = CACHES_CONFIG

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    # 使用自定义复杂密码验证器，实现密码规则验证
    {
        'NAME': 'dream.validators.ComplexPasswordValidator',
        'OPTIONS': {
            'min_length': 8,
            'max_length': 32,
        }
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-CN'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False  # 这个设置为True时，Django内部使用UTC，只在展示时转换

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 自定义用户模型配置
# 指定我们自定义的User模型，格式为 '应用名.模型名'
AUTH_USER_MODEL = 'dream.User'

# 密码哈希设置
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
]

# REST Framework 配置
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',  # 把数据转换成JSON格式返回
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',  # 解析JSON格式的请求数据
        'rest_framework.parsers.MultiPartParser',  # 解析文件上传数据
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT认证
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # 允许任何用户访问API
    ],
}

# JWT设置
SIMPLE_JWT = JWT_CONFIG

# RabbitMQ配置
RABBITMQ_HOST = RABBITMQ_CONFIG['host']
RABBITMQ_PORT = RABBITMQ_CONFIG['port']
RABBITMQ_USER = RABBITMQ_CONFIG['user']
RABBITMQ_PASSWORD = RABBITMQ_CONFIG['password']
RABBITMQ_VHOST = RABBITMQ_CONFIG['vhost']

# Redis配置
REDIS_HOST = REDIS_CONFIG['host']
REDIS_PORT = REDIS_CONFIG['port']
REDIS_PASSWORD = REDIS_CONFIG['password']  # Redis密码
REDIS_DB = 0  # 使用的数据库编号

# Celery配置
# 使用RabbitMQ作为消息代理
CELERY_BROKER_URL = CELERY_CONFIG['broker_url']
# Redis结果后端配置(带密码认证)
CELERY_RESULT_BACKEND = CELERY_CONFIG['result_backend']
CELERY_REDIS_MAX_CONNECTIONS = CELERY_CONFIG['redis_max_connections']

# Celery序列化设置
CELERY_ACCEPT_CONTENT = CELERY_CONFIG['accept_content']
CELERY_TASK_SERIALIZER = CELERY_CONFIG['task_serializer']
CELERY_RESULT_SERIALIZER = CELERY_CONFIG['result_serializer']
CELERY_TIMEZONE = CELERY_CONFIG['timezone']
CELERY_ENABLE_UTC = CELERY_CONFIG['enable_utc']

# Redis结果过期时间(秒)
CELERY_TASK_RESULT_EXPIRES = CELERY_CONFIG['task_result_expires']

# 任务执行设置
CELERY_TASK_ACKS_LATE = CELERY_CONFIG['task_acks_late']
CELERY_TASK_REJECT_ON_WORKER_LOST = CELERY_CONFIG['task_reject_on_worker_lost']

# 由于WSGI只支持HTTP协议，而asgi模块支持WebSocket协议
ASGI_APPLICATION = 'backend.asgi.application'

# - 配置消息层，用于处理WebSocket连接之间的通信
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/2'],
        },
    },
}

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
