---
description: 
globs: 
alwaysApply: true
---
### **注意：该项目是全栈项目的后端部分，你不需要创建模版，你只需要关注前端发送的请求，并根据RESTful API规范通过DRF对接即可，前端使用的是基于vite构架的React。**

您是 Python、Django 和可扩展 Web 应用程序开发方面的专家。

### 关键原则
- 使用精确的 Django 示例写出清晰、技术性的答复。
- 尽可能使用 Django 的内置功能和工具来充分发挥其功能。
- 优先考虑可读性和可维护性,其次尽量保持代码简洁复用性高；遵循 Django 的编码风格指南（符合 PEP 8）。
- 使用描述性变量和函数名称；遵守命名约定（例如，函数和变量使用小写加下划线）。
- 使用 Django 应用程序以模块化方式构建您的项目，以提高可重用性和关注点分离。

### Django/Python
- 根据业务情况，使用 Django 的基于类的视图（CBV）获得更复杂的视图；反之优先使用基于函数的视图（FBV）获得更简单的逻辑。
- 利用 Django 的 ORM 进行数据库交互；除非性能需要，否则避免使用原始 SQL 查询。
- 使用 Django 内置的用户模型和使用了JWT（JSON Web Token）进行身份验证。
- 优先利用 Django 的表单Form和模型表单Modelform进行表单处理和验证。
- 严格遵循 MVT（模型-视图-模板）模式，以明确分离关注点。
- 明智地使用中间件来处理诸如身份验证、日志记录和缓存等跨切关注点。

### 错误处理和验证
- 在视图级别实现错误处理并使用 Django 内置的错误处理机制。
- 使用 Django 的验证框架来验证表单和模型数据。
- 更喜欢使用 try-except 块来处理业务逻辑和视图中的异常。
- 使用 Django 信号将错误处理和日志记录与核心业务逻辑分离。

### 依赖项
- window系统
– Django4.x版本,python3.9解释器
- async (用于异步处理)
- channels（用于实时通信）
- Django DRF 框架（用于 API 开发）
- Celery（用于后台任务管理）
- Rabbitmq （用于任务队列）
- Redis（用于缓存）
- MySQL（生产首选数据库）

### Django 特定指南
- 将业务逻辑保留在模型和表单中；保持视图简洁并专注于请求处理。
- 使用 Django 的 URL 调度程序 (urls.py) 定义清晰的 RESTful URL 模式。
- 应用 Django 的安全最佳实践（例如，CSRF 保护、SQL 注入保护、XSS 预防）。
- 使用 Django 的内置工具进行测试（unittest 和 pytest-django）以确保代码质量和可靠性。
- 利用 Django 的缓存框架来优化频繁访问数据的性能。
- 使用 Django 的中间件执行常见任务，例如身份验证、日志记录和安全。

### 性能优化
- 使用 Django ORM 的 select_related 和 prefetch_related 进行相关对象获取，优化查询性能。
- 使用带有后端支持的 Django 缓存框架（例如 Redis 或 Memcached）来减少数据库负载。
- 实施数据库索引和查询优化技术（主从配置等）以获得更好的性能。
- 使用异步视图和后台任务（通过 Celery）进行 I/O 密集型或长时间运行的操作。
- 使用 Django 的静态文件管理系统（例如 WhiteNoise 或 CDN 集成）优化静态文件处理。

### 关键约定
1.遵循 Django 的“约定优于配置”原则，减少样板代码。
2. 在开发的每个阶段优先考虑安全性和性能优化。
3. 保持清晰、合乎逻辑的项目结构，以增强可读性和可维护性。
  
请参阅 Django 文档，了解有关视图、模型、表单和安全注意事项的最佳实践。
  